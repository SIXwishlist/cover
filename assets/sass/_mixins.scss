// parses any value into an int
@function parse-int($n) {
  @return $n / ($n * 0 + 1);
}

// outputs a rem value for a given property name, with a fallback pixel value
// most commonly used for font sizes
@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px, $value);
      $rem: append($rem, $value);
    } @else {
      $unit: unit($value);
      $val: parse-int($value);

      @if $unit == 'px' {
        $px : append($px, $value);
        $rem: append($rem, ($val / 16 * 1rem));
      }

      @if $unit == 'rem' {
        $px : append($px, ($val * 16 * 1px));
        $rem: append($rem, $value);
      }
    }
  }

  /*
  * Note: this doubles the declarations of font-size,
  * Unlike multiple declarations of the background property,
  * css linter tasks do not recognize this as providing a fallback
  * for browsers that do not support the rem property.
  */
  #{$property}: $px;
  #{$property}: $rem;
}

// handles site width, defaulting to medium
@mixin site-width($width: $width-medium) {
  margin-left: auto;
  margin-right: auto;
  max-width: $width;
  width: 90%;
}

// handles min-width media query, eliminating repeat code
@mixin min-width($breakpoint) {
  @media screen and (min-width: $breakpoint) {
    @content;
  }
}

// handles max-width media query, eliminating repeat code
@mixin max-width($breakpoint) {
  @media screen and (max-width: $breakpoint) {
    @content;
  }
}

// handles elements with a background color, which need to darken on hover
@mixin bg-color-hover($color: $color-gray) {
  background-color: $color;

  &:hover {
    background-color: darken($color, 10%);
  }

  &:active {
    background-color: darken($color, 20%);
  }
}

// generates styles commonly used for buttons
@mixin button($color: $color-gray) {
  @include rem(font-size, $font-size-normal);
  background-color: $color;
  border: 0;
  border-radius: 4px;
  color: $color-white;
  cursor: pointer;
  display: inline-block;
  line-height: normal;
  margin-bottom: 5px;
  padding: 10px 20px;
  text-decoration: none;
  transition: all .2s;

  &:focus,
  &:visited {
    color: $color-white;
  }

  &:hover {
    background-color: darken($color, 10%);
    color: $color-white;
    opacity: .9;
  }

  &:active {
    background-color: darken($color, 20%);
    color: $color-white;
  }

  &.round {
    border-radius: 25px;
  }

  &.full {
    display: block;
  }
}

// shared style used for both normal and aesop image component captions
// not technically a mixin, but never found in by itself in the stylesheet
%image-caption {
  @include rem(font-size, 15px);
  @include site-width;
  font-family: $font-stack-content;
  font-style: italic;
  margin-bottom: 10px;
  margin-top: 5px;

  i,
  em {
    font-style: normal;
  }
}
